from aiogram import Router
from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

from sqlalchemy import select
from handlers.admin import admin_orders_button
from db import async_sessionmaker, Order, User
from states import OrderStates, EditDataStates, DirectMessageStates
from config import ADMIN_IDS
from datetime import datetime, time
from zoneinfo import ZoneInfo

router = Router()

MOSCOW_TZ = ZoneInfo("Europe/Moscow")


def main_menu_keyboard() -> types.ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    kb.button(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
    kb.button(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é")
    kb.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    kb.adjust(1)
    return kb.as_markup(resize_keyboard=True)


@router.message(lambda message: "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑" in message.text)
async def make_order(message: types.Message, state: FSMContext):
    """
    –®–∞–≥ 1: –í—ã–±–∏—Ä–∞–µ–º, –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ - '–°–µ–≥–æ–¥–Ω—è' –∏–ª–∏ '–ó–∞–≤—Ç—Ä–∞'.
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="–°–µ–≥–æ–¥–Ω—è", callback_data="choose_day_today")
    builder.button(text="–ó–∞–≤—Ç—Ä–∞", callback_data="choose_day_tomorrow")
    builder.adjust(2)

    await message.answer(
        "–í—ã–±–µ—Ä–∏, –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ö–æ—á–µ—à—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(OrderStates.waiting_for_day)


@router.callback_query(OrderStates.waiting_for_day, F.data.startswith("choose_day_"))
async def day_chosen(callback: types.CallbackQuery, state: FSMContext):
    """
    –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–Ω—å –≤ state. 
    –ï—Å–ª–∏ '–°–µ–≥–æ–¥–Ω—è' - –∏–¥—ë–º –∫ –≤–≤–æ–¥—É —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (HH:MM).
    –ï—Å–ª–∏ '–ó–∞–≤—Ç—Ä–∞' - —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–µ—Å–ª–∏ —Ö–æ—Ç–∏–º).
    """
    choice = callback.data.split("_")[-1]
    if choice == "today":
        await state.update_data(chosen_day="–°–µ–≥–æ–¥–Ω—è")
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00)."
        )
        await state.set_state(OrderStates.waiting_for_time)

    elif choice == "tomorrow":
        await state.update_data(chosen_day="–ó–∞–≤—Ç—Ä–∞")
        builder = InlineKeyboardBuilder()
        builder.button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order")
        builder.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_order")
        builder.adjust(2)

        await callback.message.edit_text(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏: –ó–∞–≤—Ç—Ä–∞\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?",
            reply_markup=builder.as_markup()
        )
        await state.set_state(OrderStates.confirm_order)

    else:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@router.message(OrderStates.waiting_for_time)
async def get_time(message: types.Message, state: FSMContext):
    """
    –®–∞–≥ 3 (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ '–°–µ–≥–æ–¥–Ω—è'): –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –≤—Ä–µ–º—è (HH:MM).
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å, –∏–Ω–∞—á–µ –ø—Ä–æ—Å–∏–º –∑–∞–Ω–æ–≤–æ.
    """
    time_text = message.text.strip()
    parts = time_text.split(":")
    if len(parts) != 2 or not all(p.isdigit() for p in parts):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")
        return

    h, m = map(int, parts)
    if h < 0 or h > 23 or m < 0 or m > 59:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è. –ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å 0‚Äì23, –º–∏–Ω—É—Ç—ã 0‚Äì59.")
        return

    chosen_time = f"{h:02d}:{m:02d}"
    data = await state.get_data()
    day = data.get("chosen_day", "–°–µ–≥–æ–¥–Ω—è")
    preferred_time = f"{day}, {chosen_time}"
    await state.update_data(preferred_time=preferred_time)

    builder = InlineKeyboardBuilder()
    builder.button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order")
    builder.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_order")
    builder.adjust(2)

    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {preferred_time}\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?",
        reply_markup=builder.as_markup()
    )
    await state.set_state(OrderStates.confirm_order)


@router.callback_query(OrderStates.confirm_order, F.data == "cancel_order")
async def cancel_order_handler(callback: types.CallbackQuery, state: FSMContext):
    """
    –û—Ç–º–µ–Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.
    """
    await callback.message.edit_text("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()


@router.callback_query(OrderStates.confirm_order, F.data == "confirm_order")
async def confirm_order_handler(callback: types.CallbackQuery, state: FSMContext):
    """
    –®–∞–≥ 4: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º,
    –µ—Å–ª–∏ "–°–µ–≥–æ–¥–Ω—è" ‚Äì —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è (HH:MM) —Å –ø–æ—Ä–æ–≥–æ–º 11:30.
    –ï—Å–ª–∏ "–ó–∞–≤—Ç—Ä–∞" ‚Äì –≤—Å–µ–≥–¥–∞ "–∑–∞–≤—Ç—Ä–∞ —Å 8 –¥–æ 12".
    """
    data = await state.get_data()
    preferred_time = data.get("preferred_time", "")

    if "," in preferred_time:
        day_part, time_part = preferred_time.split(",")
        day_part = day_part.strip()
        time_part = time_part.strip()
    else:
        day_part = preferred_time.strip()
        time_part = None

    async with async_sessionmaker() as session:
        user_in_db = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = user_in_db.scalar_one_or_none()

        if not user:
            await callback.message.edit_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            await state.clear()
            return

        if callback.from_user.username and user.username != callback.from_user.username:
            user.username = callback.from_user.username
            await session.commit()

        new_order = Order(
            user_id=user.id,
            status="–ù–æ–≤–∞—è (–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)",
            preferred_time=preferred_time
        )
        session.add(new_order)
        await session.commit()
        await session.refresh(new_order)
        order_id = new_order.id

    if day_part == "–°–µ–≥–æ–¥–Ω—è":
        h_str, m_str = time_part.split(":")
        h, m = int(h_str), int(m_str)
        cutoff = time(11, 30)
        user_time = time(h, m)

        if user_time <= cutoff:
            pickup_text = "–ú—ã –∑–∞–±–µ—Ä—ë–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
        else:
            pickup_text = "–ú—ã –∑–∞–±–µ—Ä—ë–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞ —Å 8:00 –¥–æ 12:00."
    else:
        pickup_text = "–ú—ã –∑–∞–±–µ—Ä—ë–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞ —Å 8:00 –¥–æ 12:00."

    await callback.message.edit_text(
        f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{order_id}</b> —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n"
        f"üìÖ <b>–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:</b> {preferred_time}\n"
        f"üöö {pickup_text}\n\n"
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!",
        parse_mode="HTML"
    )

    from datetime import datetime
    now = datetime.now(MOSCOW_TZ)
    for admin_id_str in ADMIN_IDS:
        try:
            admin_id = int(admin_id_str)
        except ValueError:
            continue

        try:
            await callback.bot.send_message(
                admin_id,
                text=(
                    f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{order_id}\n"
                    f"–û—Ç: @{callback.from_user.username}\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: {preferred_time}\n"
                    f"–û—Ñ–æ—Ä–º–ª–µ–Ω–∞ –≤ {now.strftime('%Y-%m-%d %H:%M')} –ø–æ –ú–æ—Å–∫–≤–µ\n"
                    f"–°—Ç–∞—Ç—É—Å: –ù–æ–≤–∞—è (–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)\n\n"
                    f"{pickup_text}"
                ),
                reply_markup=admin_orders_button()
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

    await state.clear()


@router.message(lambda message: "–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é" in message.text)
async def direct_message_start(message: types.Message, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_direct_message")
    builder.adjust(1)
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ –º—ã –ø–µ—Ä–µ—à–ª—ë–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
        "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∞–¥–º–∏–Ω –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.",
        reply_markup=builder.as_markup()
    )
    await state.set_state(DirectMessageStates.waiting_for_text)


@router.callback_query(F.data == "cancel_direct_message")
async def cancel_direct_message(callback: types.CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.adjust(1)
    
    await callback.message.edit_text("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=builder.as_markup())
    await state.clear()


@router.message(DirectMessageStates.waiting_for_text)
async def direct_message_finish(message: types.Message, state: FSMContext):
    user_text = message.text
    user_id = message.from_user.id
    username = message.from_user.username or "NoUsername"

    async with async_sessionmaker() as session:
        result = await session.execute(select(User).where(User.telegram_id == user_id))
        user_obj = result.scalar_one_or_none()

    name = user_obj.name if user_obj else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    phone = user_obj.phone if user_obj and user_obj.phone else "–ù–µ —É–∫–∞–∑–∞–Ω"

    for admin_id_str in ADMIN_IDS:
        try:
            admin_id = int(admin_id_str)
        except ValueError:
            continue

        try:
            await message.bot.send_message(
                admin_id,
                text=(
                    "üì© <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
                    f"üë§ <b>–ò–º—è:</b> {name}\n"
                    f"üÜî <b>ID:</b> {user_id}\n"
                    f"üîó <b>–¢–µ–≥:</b> @{username}\n"
                    f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n\n"
                    f"‚úâÔ∏è <b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n{user_text}"
                ),
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"[direct_message_finish] –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

    await message.answer(
        "‚úÖ <b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</b>\n"
        "–û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!",
        reply_markup=main_menu_keyboard(),
        parse_mode="HTML"
    )
    await state.clear()


@router.message(lambda message: "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" in message.text)
async def edit_data_menu(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardBuilder()
    kb.button(text="üìû –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω")
    kb.button(text="üè† –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å")
    kb.button(text="üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
    kb.button(text="üè¢ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é")
    kb.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    kb.adjust(1)
    await message.answer(
        "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=kb.as_markup(resize_keyboard=True),
        parse_mode="HTML"
    )
    await state.set_state(EditDataStates.choose_field)


@router.message(EditDataStates.choose_field, F.text == "üìû –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω")
async def edit_phone_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(EditDataStates.waiting_for_new_phone)


@router.message(EditDataStates.waiting_for_new_phone)
async def edit_phone_finish(message: types.Message, state: FSMContext):
    new_phone = message.text
    async with async_sessionmaker() as session:
        user_in_db = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = user_in_db.scalar_one_or_none()
        if user:
            user.phone = new_phone
            await session.commit()

    await message.answer(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {new_phone}", reply_markup=main_menu_keyboard())
    await state.clear()


@router.message(EditDataStates.choose_field, F.text == "üè† –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å")
async def edit_address_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:")
    await state.set_state(EditDataStates.waiting_for_new_address)


@router.message(EditDataStates.waiting_for_new_address)
async def edit_address_finish(message: types.Message, state: FSMContext):
    new_address = message.text
    async with async_sessionmaker() as session:
        user_in_db = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = user_in_db.scalar_one_or_none()
        if user:
            user.address = new_address
            await session.commit()

    await message.answer(f"üè† –ê–¥—Ä–µ—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {new_address}", reply_markup=main_menu_keyboard())
    await state.clear()


@router.message(EditDataStates.choose_field, F.text == "üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
async def edit_name_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
    await state.set_state(EditDataStates.waiting_for_new_name)


@router.message(EditDataStates.waiting_for_new_name)
async def edit_name_finish(message: types.Message, state: FSMContext):
    new_name = message.text
    async with async_sessionmaker() as session:
        user_in_db = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = user_in_db.scalar_one_or_none()
        if user:
            user.name = new_name
            await session.commit()

    await message.answer(f"üë§ –ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}", reply_markup=main_menu_keyboard())
    await state.clear()


@router.message(EditDataStates.choose_field, F.text == "üè¢ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é")
async def edit_organization_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é:")
    await state.set_state(EditDataStates.waiting_for_new_organization)


@router.message(EditDataStates.waiting_for_new_organization)
async def edit_organization_finish(message: types.Message, state: FSMContext):
    new_organization = message.text
    async with async_sessionmaker() as session:
        user_in_db = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = user_in_db.scalar_one_or_none()
        if user:
            user.organization = new_organization
            await session.commit()

    await message.answer(f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_organization}", reply_markup=main_menu_keyboard())
    await state.clear()


@router.message(EditDataStates.choose_field, F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
async def edit_data_back(message: types.Message, state: FSMContext):
    await message.answer("üè† –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())
    await state.clear()
