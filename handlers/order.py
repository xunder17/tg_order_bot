from aiogram import Router
from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

from sqlalchemy import select
from handlers.admin import admin_orders_button
from db import async_sessionmaker, Order, User
from states import OrderStates, EditDataStates, DirectMessageStates
from config import ADMIN_IDS
from datetime import datetime, time
from zoneinfo import ZoneInfo

router = Router()

MOSCOW_TZ = ZoneInfo("Europe/Moscow")


def main_menu_keyboard() -> types.ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    kb.button(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
    kb.button(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é")
    kb.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    kb.adjust(1)
    return kb.as_markup(resize_keyboard=True)


@router.message(lambda message: "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑" in message.text)
async def make_order(message: types.Message, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order")
    builder.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_order")
    builder.adjust(2)

    await message.answer(
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(OrderStates.confirm_order)


@router.callback_query(OrderStates.confirm_order, F.data == "cancel_order")
async def cancel_order_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()


@router.callback_query(OrderStates.confirm_order, F.data == "confirm_order")
async def confirm_order_handler(callback: types.CallbackQuery, state: FSMContext):
    now = datetime.now(MOSCOW_TZ)
    cutoff_time = time(11, 30)
    current_time = now.time()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –ú–æ—Å–∫–≤–µ
    if current_time <= cutoff_time:
        delivery_day = "–°–µ–≥–æ–¥–Ω—è"
        pickup_text = "–ú—ã –∑–∞–±–µ—Ä—ë–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
    else:
        delivery_day = "–ó–∞–≤—Ç—Ä–∞"
        pickup_text = "–ú—ã –∑–∞–±–µ—Ä—ë–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞ —Å 8:00 –¥–æ 12:00."

    preferred_time = delivery_day

    async with async_sessionmaker() as session:
        user_in_db = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = user_in_db.scalar_one_or_none()

        if not user:
            await callback.message.edit_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            await state.clear()
            return

        if callback.from_user.username and user.username != callback.from_user.username:
            user.username = callback.from_user.username
            await session.commit()

        new_order = Order(
            user_id=user.id,
            status="–ù–æ–≤–∞—è (–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)",
            preferred_time=preferred_time
        )
        session.add(new_order)
        await session.commit()
        await session.refresh(new_order)
        order_id = new_order.id

    await callback.message.edit_text(
        f"‚úÖ <b>–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!</b>\n\n"
        f"üöö {pickup_text}\n\n"
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!",
        parse_mode="HTML"
    )

    for admin_id_str in ADMIN_IDS:
        try:
            admin_id = int(admin_id_str)
        except ValueError:
            continue

        try:
            await callback.bot.send_message(
                admin_id,
                text=(
                    f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{order_id}\n"
                    f"–û—Ç: @{callback.from_user.username}\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: {preferred_time}\n"
                    f"–û—Ñ–æ—Ä–º–ª–µ–Ω–∞ –≤ {now.strftime('%Y-%m-%d %H:%M')} –ø–æ –ú–æ—Å–∫–≤–µ\n"
                    f"–°—Ç–∞—Ç—É—Å: –ù–æ–≤–∞—è (–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)\n\n"
                    f"{pickup_text}"
                ),
                reply_markup=admin_orders_button()
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

    await state.clear()


@router.message(lambda message: "–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é" in message.text)
async def direct_message_start(message: types.Message, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_direct_message")
    builder.adjust(1)
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ –º—ã –ø–µ—Ä–µ—à–ª—ë–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
        "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∞–¥–º–∏–Ω –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.",
        reply_markup=builder.as_markup()
    )
    await state.set_state(DirectMessageStates.waiting_for_text)


@router.callback_query(F.data == "cancel_direct_message")
async def cancel_direct_message(callback: types.CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.adjust(1)
    
    await callback.message.edit_text("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=builder.as_markup())
    await state.clear()


@router.message(DirectMessageStates.waiting_for_text)
async def direct_message_finish(message: types.Message, state: FSMContext):
    user_text = message.text
    user_id = message.from_user.id
    username = message.from_user.username or "NoUsername"

    async with async_sessionmaker() as session:
        result = await session.execute(select(User).where(User.telegram_id == user_id))
        user_obj = result.scalar_one_or_none()

    name = user_obj.name if user_obj else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    phone = user_obj.phone if user_obj and user_obj.phone else "–ù–µ —É–∫–∞–∑–∞–Ω"

    for admin_id_str in ADMIN_IDS:
        try:
            admin_id = int(admin_id_str)
        except ValueError:
            continue

        try:
            await message.bot.send_message(
                admin_id,
                text=(
                    "üì© <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
                    f"üë§ <b>–ò–º—è:</b> {name}\n"
                    f"üÜî <b>ID:</b> {user_id}\n"
                    f"üîó <b>–¢–µ–≥:</b> @{username}\n"
                    f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n\n"
                    f"‚úâÔ∏è <b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n{user_text}"
                ),
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"[direct_message_finish] –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

    await message.answer(
        "‚úÖ <b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</b>\n"
        "–û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!",
        reply_markup=main_menu_keyboard(),
        parse_mode="HTML"
    )
    await state.clear()


@router.message(lambda message: "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" in message.text)
async def edit_data_menu(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardBuilder()
    kb.button(text="üìû –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω")
    kb.button(text="üè† –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å")
    kb.button(text="üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
    kb.button(text="üè¢ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é")
    kb.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    kb.adjust(1)
    await message.answer(
        "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=kb.as_markup(resize_keyboard=True),
        parse_mode="HTML"
    )
    await state.set_state(EditDataStates.choose_field)


@router.message(EditDataStates.choose_field, F.text == "üìû –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω")
async def edit_phone_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(EditDataStates.waiting_for_new_phone)


@router.message(EditDataStates.waiting_for_new_phone)
async def edit_phone_finish(message: types.Message, state: FSMContext):
    new_phone = message.text
    async with async_sessionmaker() as session:
        user_in_db = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = user_in_db.scalar_one_or_none()
        if user:
            user.phone = new_phone
            await session.commit()

    await message.answer(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {new_phone}", reply_markup=main_menu_keyboard())
    await state.clear()


@router.message(EditDataStates.choose_field, F.text == "üè† –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å")
async def edit_address_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:")
    await state.set_state(EditDataStates.waiting_for_new_address)


@router.message(EditDataStates.waiting_for_new_address)
async def edit_address_finish(message: types.Message, state: FSMContext):
    new_address = message.text
    async with async_sessionmaker() as session:
        user_in_db = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = user_in_db.scalar_one_or_none()
        if user:
            user.address = new_address
            await session.commit()

    await message.answer(f"üè† –ê–¥—Ä–µ—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {new_address}", reply_markup=main_menu_keyboard())
    await state.clear()


@router.message(EditDataStates.choose_field, F.text == "üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
async def edit_name_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
    await state.set_state(EditDataStates.waiting_for_new_name)


@router.message(EditDataStates.waiting_for_new_name)
async def edit_name_finish(message: types.Message, state: FSMContext):
    new_name = message.text
    async with async_sessionmaker() as session:
        user_in_db = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = user_in_db.scalar_one_or_none()
        if user:
            user.name = new_name
            await session.commit()

    await message.answer(f"üë§ –ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}", reply_markup=main_menu_keyboard())
    await state.clear()


@router.message(EditDataStates.choose_field, F.text == "üè¢ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é")
async def edit_organization_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é:")
    await state.set_state(EditDataStates.waiting_for_new_organization)


@router.message(EditDataStates.waiting_for_new_organization)
async def edit_organization_finish(message: types.Message, state: FSMContext):
    new_organization = message.text
    async with async_sessionmaker() as session:
        user_in_db = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = user_in_db.scalar_one_or_none()
        if user:
            user.organization = new_organization
            await session.commit()

    await message.answer(f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_organization}", reply_markup=main_menu_keyboard())
    await state.clear()


@router.message(EditDataStates.choose_field, F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
async def edit_data_back(message: types.Message, state: FSMContext):
    await message.answer("üè† –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())
    await state.clear()