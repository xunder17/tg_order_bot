import re
import logging

from datetime import datetime, timedelta

from aiogram import types, F
from aiogram.filters import Command
from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from sqlalchemy import select
from sqlalchemy.orm import selectinload
from sqlalchemy import delete

from db import async_sessionmaker, Order, User
from config import ADMIN_IDS
from states import AdminStates

router = Router()

POSSIBLE_STATUSES = ["–ù–æ–≤–∞—è (–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)", "–ù–æ–≤–∞—è (–û—Ç –ê–¥–º–∏–Ω–∞)", "–í —Ä–∞–±–æ—Ç–µ", "–ò—Å–ø–æ–ª–Ω–µ–Ω–æ"]


def admin_main_keyboard() -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="admin_add_order")
    builder.button(text="–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫", callback_data="admin_orders")
    builder.button(text="–ü–æ–º–æ—â—å", callback_data="admin_help")
    builder.adjust(1)
    return builder.as_markup()


def admin_orders_button() -> types.InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π "–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫".
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω —Ç–æ—Ç –∂–µ —Å–∞–º—ã–π –∫–æ–ª–±—ç–∫, —á—Ç–æ –≤ admin_main_keyboard().
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫", callback_data="admin_orders")
    builder.adjust(1)
    return builder.as_markup()


def is_admin(user_id: int) -> bool:
    try:
        admin_ids_int = [int(x.strip()) for x in ADMIN_IDS if x.strip()]
    except ValueError:
        admin_ids_int = []
    return user_id in admin_ids_int


@router.message(Command("admin"))
async def cmd_admin(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    await message.answer(
        "üîê *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*",
        parse_mode="Markdown",
        reply_markup=admin_main_keyboard()
    )


@router.callback_query(F.data == "admin_add_order")
async def start_add_order(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ <b>–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> –¥–ª—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏:",
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_user_name)

@router.message(AdminStates.waiting_user_name)
async def process_user_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AdminStates.waiting_user_phone)


@router.message(AdminStates.waiting_user_phone)
async def process_user_phone(message: types.Message, state: FSMContext):
    if not re.match(r'^\+?[1-9]\d{6,14}$', message.text):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
        
    await state.update_data(phone=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–∞–¥—Ä–µ—Å</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AdminStates.waiting_user_address)


@router.message(AdminStates.waiting_user_address)
async def process_user_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è</b> –¥–ª—è –∑–∞—è–≤–∫–∏:")
    await state.set_state(AdminStates.waiting_order_time)


@router.message(AdminStates.waiting_order_time)
async def process_order_time(message: types.Message, state: FSMContext):
    data = await state.get_data()

    async with async_sessionmaker() as session:
        new_user = User(
            name=data['name'],
            phone=data['phone'],
            address=data['address'],
            telegram_id=None,
            username=None
        )
        session.add(new_user)
        await session.commit()
        await session.refresh(new_user)

        new_order = Order(
            user_id=new_user.id,
            status="–ù–æ–≤–∞—è (–û—Ç –ê–¥–º–∏–Ω–∞)",
            preferred_time=message.text
        )
        session.add(new_order)
        await session.commit()
        await session.refresh(new_order)

    await message.answer(
        f"‚úÖ –ó–∞—è–≤–∫–∞ *#{new_order.id}* —Å–æ–∑–¥–∞–Ω–∞!\n"
        f"‚ñ™Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {new_user.name}\n"
        f"‚ñ™Ô∏è –¢–µ–ª–µ—Ñ–æ–Ω: {new_user.phone}\n"
        f"‚ñ™Ô∏è –í—Ä–µ–º—è: {message.text}",
        parse_mode="Markdown",
        reply_markup=admin_orders_button()
    )
    await state.clear()


@router.callback_query(F.data == "admin_orders")
async def show_orders(callback: types.CallbackQuery, state: FSMContext):
    async with async_sessionmaker() as session:
        orders = await session.execute(
            select(Order).options(selectinload(Order.user)).order_by(Order.id.desc()))
        orders = orders.scalars().all()

    if not orders:
        await callback.message.edit_text("üì≠ –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø—É—Å—Ç")
        return

    await state.update_data(all_orders=orders, current_page=0)
    await display_orders_page(callback, state)

async def display_orders_page(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    all_orders = data.get("all_orders", [])
    current_page = data.get("current_page", 0)
    orders_per_page = 10
    start_index = current_page * orders_per_page
    end_index = start_index + orders_per_page
    current_orders = all_orders[start_index:end_index]

    builder = InlineKeyboardBuilder()
    for order in current_orders:
        builder.button(
            text=f"#{order.id} - {order.status} ({order.created_at.strftime('%Y-%m-%d %H:%M')})",
            callback_data=f"order_detail_{order.id}"
        )

    if current_page > 0:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_page")
    if end_index < len(all_orders):
        builder.button(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="next_page")

    builder.button(text="‚Ü© –ù–∞–∑–∞–¥", callback_data="admin_back")
    builder.adjust(1)

    await callback.message.edit_text(
        f"üìã *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}):*",
        parse_mode="Markdown",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data == "prev_page")
async def prev_page(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_page = data.get("current_page", 0)
    if current_page > 0:
        await state.update_data(current_page=current_page - 1)
        await display_orders_page(callback, state)


@router.callback_query(F.data == "next_page")
async def next_page(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_page = data.get("current_page", 0)
    await state.update_data(current_page=current_page + 1)
    await display_orders_page(callback, state)


@router.callback_query(F.data.startswith("order_detail_"))
async def order_detail(callback: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
    –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.
    """
    order_id_str = callback.data.split("_")[-1]
    if not order_id_str.isdigit():
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞—è–≤–∫–∏.")
        return

    order_id = int(order_id_str)

    async with async_sessionmaker() as session:
        order = await session.get(Order, order_id, options=[selectinload(Order.user)])
        if not order:
            await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
            return

    status_buttons = InlineKeyboardBuilder()
    current_status = order.status

    for status in POSSIBLE_STATUSES:
        if status != current_status:
            status_buttons.button(
                text=status,
                callback_data=f"set_status_{order.id}_{status}"
            )

    status_buttons.button(text="‚Ü© –ù–∞–∑–∞–¥", callback_data="admin_orders")
    status_buttons.adjust(2)

    status_text = {
        "–ù–æ–≤–∞—è (–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)": "üü° –ù–æ–≤–∞—è (–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)",
        "–ù–æ–≤–∞—è (–û—Ç –ê–¥–º–∏–Ω–∞)": "üü† –ù–æ–≤–∞—è (–û—Ç –ê–¥–º–∏–Ω–∞)",
        "–í —Ä–∞–±–æ—Ç–µ": "üü¢ –í —Ä–∞–±–æ—Ç–µ",
        "–ò—Å–ø–æ–ª–Ω–µ–Ω–æ": "üîµ –ò—Å–ø–æ–ª–Ω–µ–Ω–æ"
    }.get(order.status, order.status)

    user_info = f"‚ñ™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order.user.name if order.user else 'N/A'}\n"
    if order.user and order.user.username:
        user_info += f"‚ñ™ –¢–µ–≥: @{order.user.username}\n"

    await callback.message.edit_text(
        f"<b>üìÑ –ó–∞—è–≤–∫–∞ #{order.id}</b>\n"
        f"{user_info}"
        f"‚ñ™ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {order.user.phone if order.user else 'N/A'}\n"
        f"‚ñ™ –í—Ä–µ–º—è: {order.preferred_time}\n"
        f"‚ñ™ –°—Ç–∞—Ç—É—Å: {status_text}\n"
        f"‚ñ™ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {order.created_at.strftime('%Y-%m-%d %H:%M')}\n"
        f"‚ñ™ –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: "
        f"{order.completed_at.strftime('%Y-%m-%d %H:%M') if order.completed_at else '–ù–µ –∏–∑–º–µ–Ω—è–ª—Å—è'}",
        parse_mode="HTML",
        reply_markup=status_buttons.as_markup()
    )


@router.callback_query(F.data.startswith("set_status_"))
async def set_order_status(callback: types.CallbackQuery):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞—è–≤–∫–∏.
    –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ '–ò—Å–ø–æ–ª–Ω–µ–Ω–æ', –≤—ã—Å—Ç–∞–≤–ª—è–µ–º completed_at.
    """
    try:
        parts = callback.data.split("_")
        if len(parts) < 3:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return

        order_id = int(parts[2])
        new_status = "_".join(parts[3:])

        async with async_sessionmaker() as session:
            order = await session.get(Order, order_id)
            if not order:
                await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            order.status = new_status

            if new_status == "–ò—Å–ø–æ–ª–Ω–µ–Ω–æ" and not order.completed_at:
                order.completed_at = datetime.utcnow()

            else:
                order.completed_at = None

            await session.commit()

        builder = InlineKeyboardBuilder()
        builder.button(text="‚Ü© –ù–∞–∑–∞–¥", callback_data="admin_orders")
        builder.adjust(1)

        await callback.message.edit_text(
            f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_status}\n"
            f"üïí –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: {datetime.utcnow().strftime('%Y-%m-%d %H:%M')}",
            reply_markup=builder.as_markup()
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")


@router.callback_query(F.data == "admin_help")
async def show_admin_help(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å" –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–ø—Ä–∞–≤–∫—É –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.
    """
    help_text = (
        "üõ† *–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.\n\n"
        "üîπ *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º:*\n"
        "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏.\n"
        "2. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è.\n"
        "3. –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–æ–∫ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –≤ —Å–ø–∏—Å–∫–µ –∑–∞—è–≤–æ–∫.\n\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
    )

    builder = InlineKeyboardBuilder()
    builder.button(text="‚Ü© –ù–∞–∑–∞–¥", callback_data="admin_back")

    await callback.message.edit_text(
        help_text,
        parse_mode="Markdown",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data == "admin_back")
async def back_to_admin_menu(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
    """
    await callback.message.edit_text(
        "üîê *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*",
        parse_mode="Markdown",
        reply_markup=admin_main_keyboard()
    )

async def cleanup_old_orders():
    try:
        twenty_four_hours_ago = datetime.utcnow() - timedelta(hours=24)
        async with async_sessionmaker() as session:
            result = await session.execute(
                delete(Order)
                .where(Order.status == "–ò—Å–ø–æ–ª–Ω–µ–Ω–æ")
                .where(Order.completed_at < twenty_four_hours_ago)
            )
            deleted_count = result.rowcount
            await session.commit()
            logging.info(f"Deleted {deleted_count} orders older than 24 hours.")
    except Exception as e:
        logging.error(f"Error during cleanup_old_orders: {e}")
