import re
import logging

from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

from aiogram import types, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from sqlalchemy import select, delete
from sqlalchemy.orm import selectinload

from db import async_sessionmaker, Order, User
from config import ADMIN_IDS
from states import AdminStates

MOSCOW_TZ = ZoneInfo("Europe/Moscow")
router = Router()

POSSIBLE_STATUSES = [
    "–ù–æ–≤–∞—è (–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)",
    "–ù–æ–≤–∞—è (–û—Ç –ê–¥–º–∏–Ω–∞)",
    "–í —Ä–∞–±–æ—Ç–µ",
    "–ò—Å–ø–æ–ª–Ω–µ–Ω–æ",
]


def admin_main_keyboard() -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="admin_add_order")
    kb.button(text="–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏", callback_data="admin_orders_active")
    kb.button(text="–ò—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏", callback_data="admin_orders_done")
    kb.button(text="–ü–æ–º–æ—â—å", callback_data="admin_help")
    kb.adjust(1)
    return kb.as_markup()


def admin_back_to_main() -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚Ü© –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
    kb.adjust(1)
    return kb.as_markup()


def admin_orders_button() -> types.InlineKeyboardMarkup:
    # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ handlers/order.py –¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏
    kb = InlineKeyboardBuilder()
    kb.button(text="–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫", callback_data="admin_orders_active")
    kb.adjust(1)
    return kb.as_markup()


def is_admin(user_id: int) -> bool:
    try:
        return user_id in [int(x) for x in ADMIN_IDS if x.strip().isdigit()]
    except Exception:
        return False


@router.message(Command("admin"))
async def cmd_admin(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    await message.answer(
        "üîê *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*",
        parse_mode="Markdown",
        reply_markup=admin_main_keyboard()
    )


@router.callback_query(F.data == "admin_add_order")
async def start_add_order(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ <b>–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> –¥–ª—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏:",
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_user_name)


@router.message(AdminStates.waiting_user_name)
async def process_user_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AdminStates.waiting_user_phone)


@router.message(AdminStates.waiting_user_phone)
async def process_user_phone(message: types.Message, state: FSMContext):
    if not re.match(r'^\+?[1-9]\d{6,14}$', message.text):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(phone=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–∞–¥—Ä–µ—Å</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AdminStates.waiting_user_address)


@router.message(AdminStates.waiting_user_address)
async def process_user_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è</b> –¥–ª—è –∑–∞—è–≤–∫–∏:")
    await state.set_state(AdminStates.waiting_order_time)


@router.message(AdminStates.waiting_order_time)
async def process_order_time(message: types.Message, state: FSMContext):
    data = await state.get_data()
    preferred_time = message.text.strip()

    async with async_sessionmaker() as session:
        async with session.begin():
            new_user = User(
                name=data['name'],
                phone=data['phone'],
                address=data['address'],
                telegram_id=None,
                username=None
            )
            session.add(new_user)
            await session.flush()  # —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å new_user.id

            new_order = Order(
                user_id=new_user.id,
                status="–ù–æ–≤–∞—è (–û—Ç –ê–¥–º–∏–Ω–∞)",
                preferred_time=preferred_time
            )
            session.add(new_order)
        # —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞

        await session.refresh(new_user)
        await session.refresh(new_order)

    await message.answer(
        f"‚úÖ –ó–∞—è–≤–∫–∞ *#{new_order.id}* —Å–æ–∑–¥–∞–Ω–∞!\n"
        f"‚ñ™Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {new_user.name}\n"
        f"‚ñ™Ô∏è –¢–µ–ª–µ—Ñ–æ–Ω: {new_user.phone}\n"
        f"‚ñ™Ô∏è –í—Ä–µ–º—è: {preferred_time}",
        parse_mode="Markdown",
        reply_markup=admin_back_to_main()
    )
    await state.clear()


@router.callback_query(F.data.startswith("admin_orders"))
async def show_orders(callback: types.CallbackQuery, state: FSMContext):
    filter_done = callback.data == "admin_orders_done"
    async with async_sessionmaker() as session:
        q = select(Order).options(selectinload(Order.user))
        if filter_done:
            q = q.where(Order.status == "–ò—Å–ø–æ–ª–Ω–µ–Ω–æ")
        else:
            q = q.where(Order.status != "–ò—Å–ø–æ–ª–Ω–µ–Ω–æ")
        q = q.order_by(Order.id.desc())
        result = await session.execute(q)
        orders = result.scalars().all()

    if not orders:
        text = "üì≠ –°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –ø—É—Å—Ç" if filter_done else "üì≠ –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –ø—É—Å—Ç"
        await callback.message.edit_text(text, reply_markup=admin_back_to_main())
        return

    await state.update_data(all_orders=orders, current_page=0)
    await display_orders_page(callback, state)


async def display_orders_page(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    orders = data["all_orders"]
    page = data.get("current_page", 0)
    per_page = 10
    chunk = orders[page*per_page:(page+1)*per_page]

    kb = InlineKeyboardBuilder()
    for o in chunk:
        ts = o.created_at.replace(tzinfo=ZoneInfo("UTC")).astimezone(MOSCOW_TZ)
        kb.button(
            text=f"#{o.id} {o.status} ({ts:%Y-%m-%d %H:%M})",
            callback_data=f"order_detail_{o.id}"
        )
    if page > 0:
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_page")
    if (page+1)*per_page < len(orders):
        kb.button(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="next_page")

    kb.button(text="‚Ü© –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
    kb.adjust(1)

    total = (len(orders)-1)//per_page + 1
    await callback.message.edit_text(
        f"üìã –ó–∞—è–≤–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total}):",
        parse_mode="Markdown",
        reply_markup=kb.as_markup()
    )


@router.callback_query(F.data == "prev_page")
async def prev_page(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if data["current_page"] > 0:
        await state.update_data(current_page=data["current_page"] - 1)
        await display_orders_page(callback, state)


@router.callback_query(F.data == "next_page")
async def next_page(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await state.update_data(current_page=data.get("current_page", 0) + 1)
    await display_orders_page(callback, state)


@router.callback_query(F.data.startswith("order_detail_"))
async def order_detail(callback: types.CallbackQuery):
    order_id = int(callback.data.rsplit("_", 1)[1])
    async with async_sessionmaker() as session:
        order = await session.get(Order, order_id, options=[selectinload(Order.user)])

    if not order:
        await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=admin_back_to_main())
        return

    # –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞
    kb_status = InlineKeyboardBuilder()
    for status in POSSIBLE_STATUSES:
        if status != order.status:
            kb_status.button(text=status, callback_data=f"set_status_{order.id}_{status}")

    # –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    kb_ctrl = InlineKeyboardBuilder()
    kb_ctrl.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{order.id}")
    kb_ctrl.button(text="‚Ü© –ö —Å–ø–∏—Å–∫—É", callback_data="admin_orders_active")
    kb_ctrl.adjust(2)

    kb = InlineKeyboardBuilder()
    kb.attach(kb_status)
    kb.attach(kb_ctrl)
    kb.adjust(2, repeat=True)

    ts = order.created_at.replace(tzinfo=ZoneInfo("UTC")).astimezone(MOSCOW_TZ)
    completed = (
        order.completed_at.replace(tzinfo=ZoneInfo("UTC")).astimezone(MOSCOW_TZ).strftime('%d.%m.%Y %H:%M')
        if order.completed_at else "–ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    )
    status_text = {
        "–ù–æ–≤–∞—è (–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)": "üü° –ù–æ–≤–∞—è (–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)",
        "–ù–æ–≤–∞—è (–û—Ç –ê–¥–º–∏–Ω–∞)":    "üü† –ù–æ–≤–∞—è (–û—Ç –ê–¥–º–∏–Ω–∞)",
        "–í —Ä–∞–±–æ—Ç–µ":             "üü¢ –í —Ä–∞–±–æ—Ç–µ",
        "–ò—Å–ø–æ–ª–Ω–µ–Ω–æ":            "üîµ –ò—Å–ø–æ–ª–Ω–µ–Ω–æ"
    }.get(order.status, order.status)

    user = order.user or User(name="N/A", phone="N/A", address="N/A", organization="N/A")
    info = (
        f"‚ñ™ –ò–º—è: {user.name}\n"
        f"‚ñ™ –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n"
        f"‚ñ™ –ê–¥—Ä–µ—Å: {user.address}\n"
        f"‚ñ™ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {user.organization}\n"
    )

    await callback.message.edit_text(
        f"<b>üìÑ –ó–∞—è–≤–∫–∞ #{order.id}</b>\n\n"
        f"<b>üë§ –ö–ª–∏–µ–Ω—Ç:</b>\n{info}\n"
        f"<b>üì¶ –î–µ—Ç–∞–ª–∏:</b>\n"
        f"‚ñ™ –í—Ä–µ–º—è: {order.preferred_time}\n"
        f"‚ñ™ –°—Ç–∞—Ç—É—Å: {status_text}\n"
        f"‚ñ™ –°–æ–∑–¥–∞–Ω–æ: {ts:%d.%m.%Y %H:%M}\n"
        f"‚ñ™ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed}",
        parse_mode="HTML",
        reply_markup=kb.as_markup()
    )


@router.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete(callback: types.CallbackQuery):
    order_id = int(callback.data.rsplit("_", 1)[1])
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_order_{order_id}")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"order_detail_{order_id}")
    kb.adjust(2)
    await callback.message.edit_text(
        f"‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É #{order_id}?",
        reply_markup=kb.as_markup()
    )


@router.callback_query(F.data.startswith("delete_order_"))
async def delete_order_handler(callback: types.CallbackQuery, state: FSMContext):
    order_id = int(callback.data.rsplit("_", 1)[1])
    async with async_sessionmaker() as session:
        async with session.begin():
            o = await session.get(Order, order_id)
            if o:
                await session.delete(o)
    await callback.message.edit_text(
        f"‚úÖ –ó–∞—è–≤–∫–∞ #{order_id} —É–¥–∞–ª–µ–Ω–∞.",
        reply_markup=admin_back_to_main()
    )
    await show_orders(callback, state)


@router.callback_query(F.data.startswith("set_status_"))
async def set_order_status(callback: types.CallbackQuery):
    payload = callback.data[len("set_status_"):]          # e.g. "2_–ò—Å–ø–æ–ª–Ω–µ–Ω–æ"
    order_id_str, new_status = payload.split("_", 1)
    try:
        order_id = int(order_id_str)
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏.")
        return

    async with async_sessionmaker() as session:
        order = await session.get(Order, order_id)
        if not order:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        order.status = new_status
        order.completed_at = datetime.utcnow() if new_status == "–ò—Å–ø–æ–ª–Ω–µ–Ω–æ" else None
        await session.commit()

    kb = InlineKeyboardBuilder()
    kb.button(text="‚Ü© –ù–∞–∑–∞–¥ –∫ –∞–∫—Ç–∏–≤–Ω—ã–º", callback_data="admin_orders_active")
    kb.adjust(1)
    await callback.message.edit_text(
        f"‚úÖ –°—Ç–∞—Ç—É—Å #{order_id} -> {new_status}",
        reply_markup=kb.as_markup()
    )


@router.callback_query(F.data == "admin_help")
async def show_admin_help(callback: types.CallbackQuery):
    text = (
        "üõ† *–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "üî∏ –î–æ–±–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É\n"
        "üî∏ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ / –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏\n"
        "üî∏ –°–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É\n"
    )
    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=admin_back_to_main()
    )


@router.callback_query(F.data == "admin_back")
async def back_to_admin_menu(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üîê *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*",
        parse_mode="Markdown",
        reply_markup=admin_main_keyboard()
    )


async def cleanup_old_orders():
    try:
        cutoff = datetime.utcnow() - timedelta(hours=24)
        async with async_sessionmaker() as session:
            await session.execute(
                delete(Order)
                .where(Order.status == "–ò—Å–ø–æ–ª–Ω–µ–Ω–æ")
                .where(Order.completed_at < cutoff)
            )
            await session.commit()
        logging.info("–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –≤ cleanup_old_orders")
