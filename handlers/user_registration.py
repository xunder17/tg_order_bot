import re

from aiogram import Router
from aiogram import types, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from sqlalchemy import select

from db import async_sessionmaker, User
from states import RegistrationStates
from aiogram.utils.keyboard import ReplyKeyboardBuilder

router = Router()


def main_menu_keyboard() -> types.ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    kb.button(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
    kb.button(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é")
    kb.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    kb.adjust(1)
    return kb.as_markup(resize_keyboard=True)


@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    async with async_sessionmaker() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()
    if user is None:
        # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–°—Ç–∞—Ä—Ç"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –°—Ç–∞—Ä—Ç", callback_data="start_work")]
        ])
        await message.answer(
            "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ —É–º–Ω–æ–≥–æ –±–æ—Ç–∞! ‚ú®\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–°—Ç–∞—Ä—Ç</b>, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
            parse_mode="HTML",
            reply_markup=keyboard
        )
    else:
        await message.answer(
            "üëã –°–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç! –í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é!",
            reply_markup=main_menu_keyboard(),
            parse_mode="HTML"
        )

@router.callback_query(lambda callback: callback.data == "start_work")
async def start_work_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" –≤ Telegram
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await callback.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:",
        parse_mode="HTML"
    )
    await state.set_state(RegistrationStates.waiting_for_name)


def validate_phone(phone: str) -> bool:
    return bool(re.match(r'^\+?[1-9]\d{6,14}$', phone.strip()))


def validate_name(name: str) -> bool:
    return 2 <= len(name.strip()) <= 50 and re.match(r'^[a-zA-Z–∞-—è–ê-–Ø\s-]+$', name.strip())


def validate_address(address: str) -> bool:
    return 5 <= len(address.strip()) <= 200


@router.message(RegistrationStates.waiting_for_phone)
async def reg_get_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    if not validate_phone(phone):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: +79991234567 (–æ—Ç 7 –¥–æ 15 —Ü–∏—Ñ—Ä).")
        return
    await state.update_data(phone=phone)
    await message.answer("–í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å:")
    await state.set_state(RegistrationStates.waiting_for_address)


@router.message(RegistrationStates.waiting_for_name)
async def reg_get_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if not validate_name(name):
        await message.answer("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –¥–µ—Ñ–∏—Å.")
        return
    await state.update_data(name=name)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(RegistrationStates.waiting_for_phone)


@router.message(RegistrationStates.waiting_for_address)
async def reg_get_address(message: types.Message, state: FSMContext):
    address = message.text.strip()
    if not validate_address(address):
        await message.answer("‚ùå –ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5 –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    await state.update_data(address=address)
    await message.answer("–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å). –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏ '–ù–µ—Ç':")
    await state.set_state(RegistrationStates.waiting_for_organization)


@router.message(RegistrationStates.waiting_for_organization)
async def reg_get_organization(message: types.Message, state: FSMContext):
    data = await state.get_data()
    name = data["name"]
    phone = data["phone"]
    address = data["address"]
    organization = message.text

    tg_id = message.from_user.id

    async with async_sessionmaker() as session:
        new_user = User(
            telegram_id=tg_id,
            name=name,
            phone=phone,
            address=address,
            organization = "–ù–µ—Ç" if organization.lower() == "–Ω–µ—Ç" else organization
        )
        session.add(new_user)
        await session.commit()

    await message.answer(
        f"‚ú® <b>–û—Ç–ª–∏—á–Ω–æ, {name}!</b> –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! ‚ú®\n\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
        f"üè† <b>–ê–¥—Ä–µ—Å:</b> {address}\n"
        f"üè¢ <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</b> {organization}\n\n"
        "‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
        reply_markup=main_menu_keyboard(),
        parse_mode="HTML"
    )

    await state.clear()
